workspace(name = "my_workspace")

### RUST RULES ###

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "rules_rust",
    sha256 = "dd79bd4e2e2adabae738c5e93c36d351cf18071ff2acf6590190acf4138984f6",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.14.0/rules_rust-v0.14.0.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

RUST_VERSION = "1.65.0"

rust_register_toolchains(version=RUST_VERSION, edition="2021")

### RUST THIRD PARTY ###

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")
crate_universe_dependencies()

load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_repository", "render_config")
load("//third_party/rust:crates.bzl", "third_party_crates")

crates_repository(
    name = "third_party_rust",
    rust_version = RUST_VERSION,
    cargo_lockfile = "//third_party/rust:Cargo.Bazel.lock",
    lockfile = "//third_party/rust:cargo-bazel-lock.json",
    packages = {
        name: crate.spec(
            version = info["version"],
            features = info.get("features", []),
            default_features = info.get("default_features", True),
        )
        for name, info in third_party_crates.items()
    },
    # Setting the default package name to `""` forces the use of the macros defined in this repository
    # to always use the root package when looking for dependencies or aliases. This should be considered
    # optional as the repository also exposes alises for easy access to all dependencies.
    render_config = render_config(
        default_package_name = ""
    ),
)

load("@third_party_rust//:defs.bzl", "crate_repositories")

crate_repositories()

### PYTHON RULES ###

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "rules_python",
    sha256 = "48a838a6e1983e4884b26812b2c748a35ad284fd339eb8e2a6f3adf95307fbcd",
    strip_prefix = "rules_python-0.16.2",
    url = "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.16.2.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

PYTHON_VERSION = "3.9"

python_register_toolchains(
    name = "python3",
    # Available versions are listed in @rules_python//python:versions.bzl.
    # We recommend using the same version your team is already standardized on.
    python_version = PYTHON_VERSION,
)

load("@python3//:defs.bzl", "interpreter")

### PIP THIRD PARTY ###
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "third_party_python",
    requirements_lock  = "//third_party/python:requirements_lock.txt",
    python_interpreter_target = interpreter
)

# Create a central repo that knows about the dependencies needed from Pipfile.lock
# Each dependency will only be loaded if needed by a target.
# load("//tools/python/pipenv:defs.bzl", "pipenv_parse")
# pipenv_parse(
#     name="third_party_python",
#     pipfile="//third_party/python:Pipfile",
#     pipfile_lock="//third_party/python:Pipfile.lock",
#     python_interpreter_target=interpreter,
# )
# steal this https://github.com/jacksmith15/bazel-python-demo

# Load the starlark macro which will define your dependencies.
load("@third_party_python//:requirements.bzl", "install_deps")
# Call it to define repos for your requirements.
install_deps()

# END -----------------------------------